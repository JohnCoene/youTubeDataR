% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/searchTube.R
\name{searchTube}
\alias{searchTube}
\title{searchTube}
\usage{
searchTube(token, query = "cats", type = "video",
  video.dimensions = "any", video.caption, video.category.id, video.duration,
  video.definition, video.license, location, location.radius,
  order = "relevance", region.code, safe.search = "none", event.type,
  published.before, published.after, channel.id)
}
\arguments{
\item{token}{Your OAuth token see \code{link{youOAuth}}, required.}

\item{query}{Your search Query, required.}

\item{type}{Content to search, either \code{video} (default), \code{channel} or 
\code{playlist}, required.}

\item{video.caption}{Filter video search results based on whether they 
have captions, \code{type} must also be set to \code{video}.}

\item{video.category.id}{Filters video search results based on their category, \code{type} must also 
be set to \code{video}.}

\item{video.duration}{Filters video search results based on their duration, 
\code{type} must also be set to \code{video}.}

\item{video.definition}{restrict a search to only include either high definition (HD) or standard 
definition (SD) videos. HD videos are available for playback in at least 
720p, though higher resolutions, like 1080p, might also be available, 
\code{type} must also be set to \code{video}.}

\item{video.license}{filters search results to only include videos with a particular license. 
YouTube lets video uploaders choose to attach either the Creative Commons 
license or the standard YouTube license to each of their videos, 
\code{type} must also be set to \code{video}.}

\item{location}{The location parameter, in conjunction with the locationRadius parameter, 
defines a circular geographic area and also restricts a search to videos 
that specify, in their metadata, a geographic location that falls within 
that area.}

\item{location.radius}{The locationRadius parameter, in conjunction with the location parameter, 
defines a circular geographic area in kilometers. The API does not support 
radius values larger than 1000 kilometers.}

\item{order}{Method used to order resources in the API response. defaults to 
\code{relevance} see \code{link{findParams}}}

\item{region.code}{Return search results for the specified country. The parameter value is an 
\href{https://www.iso.org/obp/ui/#search/code/}{ISO 3166-1 alpha-2} 
country code (i.e.: \code{US}).}

\item{safe.search}{Whether the search results should include restricted content as well as 
standard content. Can be one of \code{moderate}, \code{none} (default) or 
\code{strict}}

\item{event.type}{Restricts a search to broadcast events, can be \code{completed}, 
\code{live} or \code{upcoming}. 
\code{type} must also be set to \code{video}.}

\item{published.before}{indicates that the API response should only contain resources created 
 before the specified time. Can be either of class \code{Date} ("%Y-%m-%d") 
or \code{POSIXct} or \code{POSIXlt} with time, or an RFC 3339 formatted 
date-time value (i.e.: \code{(1970-01-01T00:00:00Z}).}

\item{published.after}{indicates that the API response should only contain resources created after 
the specified time. Can be either of class \code{Date} ("%Y-%m-%d") 
or \code{POSIXct} or \code{POSIXlt} with time, or an RFC 3339 formatted 
date-time value (i.e.: \code{(1970-01-01T00:00:00Z}).}

\item{channel.id}{Filter by channel. 
Note: Search results are constrained to a maximum of 500 videos if your 
request specifies a value for the channelId parameter and sets the type 
parameter value to video}

\item{video.dimension}{Restrict a search to only retrieve 2D or 3D videos. 
Can be \code{2d}, \code{3d} or \code{any} (default). 
\code{type} must also be set to \code{video}.}
}
\description{
Search YouTube videos or playlists
}
\details{
Visit the official documentation on the parameters for more 
information; 
\url{https://developers.google.com/youtube/v3/docs/search/list}

Visit the official documention on the actual API call this function refers 
to; 
\url{https://developers.google.com/youtube/v3/guides/implementation/search}
}
\author{
John Coene <jcoenep@hotmai.com>
}

