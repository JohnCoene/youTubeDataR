% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_channels.R
\name{getChannels}
\alias{getChannels}
\title{getChannels}
\usage{
getChannels(token, n = 50, part = "snippet", category.id = NULL,
  for.username = NULL, id = NULL, managed.by.me = FALSE, mine = FALSE,
  hl = NULL, max.results = 50, on.behalf.of.content.owner = NULL,
  verbose = FALSE)
}
\arguments{
\item{token}{Your token as returned by \code{\link{youOAuth}}.}

\item{n}{Number of results to fecth. The default value is \code{50}.}

\item{part}{The part parameter specifies a comma-separated list of one or more activity 
resource properties that the API response will include. The default value 
is \code{snippet}, see \code{\link{findParts}} or 
\href{https://developers.google.com/youtube/v3/docs/channels/list}{official documentation} 
for all valid values.}

\item{category.id}{specifies a YouTube guide category, thereby requesting YouTube channels 
associated with that category. The default value is \code{NULL}.}

\item{for.username}{Specifies a YouTube username, thereby requesting the channel associated 
with that username. The default value is \code{NULL}.}

\item{id}{specifies a comma-separated list of the YouTube channel ID(s) for the 
resource(s) that are being retrieved. In a channel resource, the id property 
specifies the channel's YouTube channel ID. The default value is \code{NULL}}

\item{managed.by.me}{This parameter can only be used in a properly authorized request. Note: This 
parameter is intended exclusively for YouTube content partners. See scopes 
under \code{\link{youOAuth}}.
Set this parameter's value to true to instruct the API to only return 
channels managed by the content owner that the 
\code{on.behalf.of.content.owner} parameter specifies. 
The user must be authenticated as a CMS account linked to the specified 
content owner and \code{on.behalf.of.content.owner} must be provided.}

\item{mine}{Set this parameter's value to true to retrieve a feed of the authenticated 
user's activities. The default value is \code{FALSE}.}

\item{hl}{The hl parameter instructs the API to retrieve localized resource metadata 
for a specific application language that the YouTube website supports. The 
parameter value must be a language code included in the list returned by the 
\href{https://developers.google.com/youtube/v3/docs/i18nLanguages/list}{i18nLanguages.list} 
method.}

\item{max.results}{Specifies the maximum number of results that should be returned 
by each API call. Acceptable values are \code{0} to \code{50}, inclusive. 
The default value is \code{50}.}

\item{on.behalf.of.content.owner}{Indicates that the request's 
authorization credentials identify a YouTube CMS user who is acting on 
behalf of the content owner specified in the parameter value. This parameter 
is intended for YouTube content partners that own and manage many different 
YouTube channels. It allows content owners to authenticate once and get 
access to all their video and channel data, without having to provide 
authentication credentials for each individual channel. The actual CMS 
account that the user authenticates with must be linked to the specified 
YouTube content owner. This parameter can only be used in a properly 
authorized request. Note: This parameter is intended exclusively for 
YouTube content partners. See scope under \code{\link{youOAuth}}. 
The default value is \code{NULL}.}

\item{verbose}{If \code{TRUE} prints infromational messages in the console. 
The default value is \code{FALSE}.}
}
\description{
Returns a collection of zero or more channel resources that 
match the request criteria.
}
\details{
MUST specify at least one of the following:
\itemize{
\item \code{category.id}
\item \code{for.username}
\item \code{id}
\item \code{managed.by.me}
\item \code{mine}
}
}
\examples{
\dontrun{
# Authenticate
token <- youOAuth(client.id = "something.apps.googleusercontent.com",
                  client.secret = "XxxXX1XxXxXxxx1xxx1xxXXX")
                  
# search channels about cats
search <- searchTube(token, query = "cats", type = "channel")

# pick random id
set.seed(19880525)
chan <- sample(search$id.channelId, 1)

# fetch
chan.dat <- getChannels(token, id = chan)
}

}
\author{
John Coene \email{jcoenep@hotmail.com}
}

